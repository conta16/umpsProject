------------ RELAZIONE ------------

- main.c:

	Definisce ready_queue (che farà da sentinella alla lista) e un vettore di pcb_t* di 3 elementi che punteranno ai 3 processi per test1, test2 e test3.
	La prima funzione chiamata è init che serve per l'inizializzazione dei pcb e delle new area, successivamente viene chiamato scheduler che si occuperà di scegliere
	ogni volta il processo da caricare nel processore.

- init.c:

	init(pcb_t*, pcb_t* []) è la funzione chiamata dal main.
	Ogni pcb_t che si ha nel vettore va allocato settando in maniera opportuna i campi della struttura e i bit di stato: IEc (interrupt enable bit) attivo (settato quindi ad 1),
	VMc (virtual memory bit) spento (0), TE (Processor Local Timer bit) attivo (1), KUc (kernel user bit) attivo (0).
	Comunque abbiamo scelto, per ora, di tenere tutti i bit dell'interrupt mask (IM) attivi tranne l'ultimo (interrupt del terminale) perchè non viene ancora gestito in questa fase e darebbe problemi
	in fase di esecuzione.
	Successivamente si dà una priorità al processo e si setta il valore del registro sp e pc_epc: quest'ultimo sarà l'indirizzo in memoria delle funzioni che saranno eseguite dai processi.

	Per le new area, i registri sono settati in maniera simile a quelli del pcb, a parte che:

		- IEc è disabilitato (abbiamo anche messo tutti i bit di IM a 0, anche se ciò non influisce sull'esecuzione del codice)
		- Pc_epc punta agli handler che gestiscono la rispettiva eccezione

	Infine, si inseriscono nella ready_queue i 3 processi tramite funzioni implementate in pcb.c.

	NOTA: Ogni volta che viene modificato il valore di pc_epc, viene modificato anche il registro t9 per ragioni tecniche della macchina simulata da umps2.

- interrupt.c:

	E' l'handler che gestisce gli interrupt e viene chiamato quando, durante l'esecuzione di un processo con IEc abilitato, viene generato un interrupt da un determinato device (lo stato del processo
	caricato dovrà avere anche il bit in IM di quel device attivo).
	In questa fase abbiamo gestito solamente un interrupt: quello generato dal Processor Local Timer.
	int_handler viene chiamato dalla new area degli interrupt e copia in current (pcb_t* che punta al processo corrente) lo stato che era stato salvato in old_area prima dell'interrupt.
	Successivamente, viene chiamato getLineInt() che determina su quale linea si è avuto l'interrupt, prendendo sempre per primo l'interrupt generato da device con priorità maggiore.
	Alla fine, manda l'ack dell'interrupt (se non venisse mandato, il programma continuerebbe a vedere sempre il bit attivo e andrebbe infinite volte nell'int_handler) e ripassa
	il controllo allo scheduler.

- scheduler.c:

	Viene definito current, il pcb che punta sempre al processo attualmente caricato sul processore: negli altri file, viene sempre richiamato utilizzando, all'inizio della dichiarazione, "extern"
	Se current è NULL, allora vuol dire che non è stato ancora caricato nessun processo su processore, oppure è appena terminato un processo. In questo caso, viene chiamato scheduler_init
	che si occupa di dare un valore a current e di trovare il processo da inserire nel processore.
	Altrimenti, si va avanti con la normale esecuzione di uno scheduler RR con aging: il processo in memoria viene rimesso a priorità originaria mentre quelli presenti nella ready_queue vengono
	aumentati di un'unità.
	Dopo, si rimette il processo puntato da current nella ready queue e si carica nuovamente il processo con maggiore priorità.
	Vengono quindi chiamate le funzioni setTIMER((3000*TIME_SCALE)) (setta il Processor Local Timer a 3 ms, quindi ogni 3 ms l'esecuzione passa all'interrupt handler) e LDST, che carica il processo selezionato
	sul processore

- syscall.c:

	Gestore delle system call accettate dal sistema operativo. Dopo i controlli di handler.c sulla validità della chiamata ci si comporta in base al codice della syscall ricevuto.

		- SYS1: GETCPUTIME -
			il tempo passato in modalità kernel e user è memorizzato in campi appositi di pcb_t e questa syscall semplicemente assegna ai registri interessati i valori corrispondenti.
		- SYS2: CREATEPROCESS -
			crea un nuovo processo figlio del processo chiamante con la sua priorità e in reg_a3 viene salvato l' indirizzo del descrittore di tale processo.
		- SYS3: TERMINATEPROCESS -
			termina il processo dichiarato nel campo reg_a1. se è NULL o 0 viene terminato il programma corrente. Ogni figlio del processo terminato viene "adottato" dal tutor più vicino o dalla radice dell' albero.
		- SYS4: VERHOGEN -
			classica Verhogen su un semaforo. L' indirizzo del semaforo è usato come chiave per determinare l' unicità dei diversi semafori.
		- SYS5: PASSEREN -
			classica Passeren su un semaforo. Il processo chiamante viene inserito in una coda apposita per processi bloccati in attesa di una Verhogen sullo stesso semaforo.
		- SYS6: WAITCLOCK -
			il processo chiamante si ferma per un ciclo di usando la syscall PASSEREN su un semaforo standard che ogni ciclo di clock fa una VERHOGEN.
	  - SYS7: WAITIO -
			il processo chiamante aspetta l' esecuzione del comando che ha passato come parametro sul dispositivo di I/O scelto.
		- SYS8: SETTUTOR -
			viene settato il campo tutor di pcb_t a 1. La prossima volta che un processo nella progenie del chiamante viene terminato tutti i figli orfani saranno "adottati" dal tutor più vicino.
		- SYS9: SPECPASSUP -
			il processo chiamante specifica le aree di memoria a cui riferirsi per le prossime trap (program trap, sysbk trap, tlb trap).
		- SYS10: GETPID -
			il processo chiamante mette nei registri appositi il suo identificatore e quello del suo genitore.

- utils.c:

	File con funzioni di "utilità", cioè che possono risultare comode per più task.

- handlers.c:
	File che si occupa della gestione delle trap e dei controlli necessari per gestirle. Se il programma corrente mentre avviene una trap ha effettuato una syscall SPECPASSUP passa il controllo all' area di memoria adibita,
	altrimenti rimanda la gestione della trap ai gestori standard.
